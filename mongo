1.	Find the information about all teachers

 db.Teacher.find({})
2.	Find the information about all teachers of computer department
 db.Teacher.find({dname:"Comp"})
3.	Find the information about all teachers of computer,IT,and e&TC
 db.Teacher.find({ dname: { $in: ["Comp", "IT", "Civil"] } })
4.	Find the information about all teachers of computer,IT,and E&TC department having salary greate than or equl to 10000/-
db.Teacher.aggregate([{$match:{dname:{$in:["Comp","IT","Civil"]},Salary:{$gte:10000}}},{$project:{_id:0,Tname:1,dname:1,Salary:1}}]);
5.	Find the student information having roll_no = 2 or Sname=xyz
db.students.find({
  $or: [
    { roll_no: 2 },
    { Sname: "xyz" }
  ]
})
6.	Update the experience of teacher-praveen to 10years, if the entry is not available in database consider the entry as new entry.

db.Teacher.updateOne(
  { Tname: "Praveen" }, // Filter by the teacher's name
  {
    $set: { Experience: "10Y" }, // Update the experience to 10 years
    $setOnInsert: { Tname: "Praveen" } // Add a new entry if not found
  },
  { upsert: true }
)
7.	Update the deparment of all the teachers working in IT deprtment to COMP
db.teachers.updateMany(
  { department: "IT" },
  { $set: { department: "COMP" } }
)
9.	Using Save() method insert one entry in department collection
const newDepartment = {
  name: "COMP",
  location: "Building A",
  head: "John Smith",
  capacity: 50
};
10.	Using Save() method change the dept of teacher Rajesh to IT
const teacher = db.teachers.findOne({ name: "Rajesh" });
11.	Delete all the doccuments from teachers collection having IT dept.
db.teachers.deleteMany({ department: "IT" });
12.	display with pretty() method, the first 3 doccuments in teachers collection in ascending order
db.teachers.find().sort({ _id: 1 }).limit(3).pretty();
3.	Find the information about two teachers
db.teachers.find().limit(2).pretty();
db.teachers.aggregate([
  {
    $match: { department: "Computer" } // Match teachers in the Computer department
  },
  {
    $group: {
      _id: null,
      averageSalary: { $avg: "$salary" } // Calculate the average salary
    }
  }
]);
3.	Find the minimum and maximum salary of e&TC department teachers
db.teachers.aggregate([
  {
    $match: { department: "E&TC" } // Match teachers in the E&TC department
  },
  {
    $group: {
      _id: null,
      minSalary: { $min: "$salary" }, // Calculate the minimum salary
      maxSalary: { $max: "$salary" }  // Calculate the maximum salary
    }
  }
]);
10.	Find the total salary all teachers
db.teachers.aggregate([
  {
    $group: {
      _id: null,
      totalSalary: { $sum: "$salary" } // Calculate the total salary
    }
  }
]);
display the no. Of employees working in each department
db.teachers.aggregate([
  {
    $group: {
      _id: "$department",
      count: { $sum: 1 } // Count the number of teachers in each department
    }
  }
]);
4.	Write the queries using the different operators like max, min. Etc.
db.teachers.aggregate([
  {
    $group: {
      _id: null,
      maxSalary: { $max: "$salary" }
    }
  }
]);
db.teachers.aggregate([
  {
    $group: {
      _id: null,
      minSalary: { $min: "$salary" }
    }
  }
]);
db.teachers.aggregate([
  {
    $group: {
      _id: null,
      averageSalary: { $avg: "$salary" }
    }
  }
]);
db.teachers.aggregate([
  {
    $group: {
      _id: null,
      totalSalary: { $sum: "$salary" }
    }
  }
]);
5.	Create unique index on any field for above given collections
db.teachers.createIndex({ email: 1 }, { unique: true });

	Create compound index on any fields for above given collections
db.teachers.createIndex({ department: 1, salary: 1 });

7.	Show all the indexes created in the database DYPIT
use DYPIT
db.collectionName.listIndexes()
use DYPIT
db.teachers.listIndexes()

8.	Show all the indexes created in above collections.
db.teachers.getIndexes()



